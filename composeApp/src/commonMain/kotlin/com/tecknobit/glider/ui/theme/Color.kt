package com.tecknobit.glider.ui.theme
import androidx.compose.ui.graphics.Color

val primaryLightHighContrast = Color(0xFF0025A0)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF0040E0)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF003080)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF0055CC)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF003070)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF0050B0)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF8A1A2E)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFFB02D40)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFEDF4FF)
val onBackgroundLightHighContrast = Color(0xFF002060)
val surfaceLightHighContrast = Color(0xFFEDF4FF)
val onSurfaceLightHighContrast = Color(0xFF001040)
val surfaceVariantLightHighContrast = Color(0xFFC0D0FF)
val onSurfaceVariantLightHighContrast = Color(0xFF001040)
val outlineLightHighContrast = Color(0xFF0025A0)
val outlineVariantLightHighContrast = Color(0xFF0040E0)
val scrimLightHighContrast = Color(0xFF001040)
val inverseSurfaceLightHighContrast = Color(0xFF203E80)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFA0B8FF)
val surfaceDimLightHighContrast = Color(0xFFA0B8FF)
val surfaceBrightLightHighContrast = Color(0xFFEDF4FF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFDCE6FF)
val surfaceContainerLightHighContrast = Color(0xFFC8D6FF)
val surfaceContainerHighLightHighContrast = Color(0xFFAFC6FF)
val surfaceContainerHighestLightHighContrast = Color(0xFF98B5FF)

val primaryDark = Color(0xFFA0B8FF)
val onPrimaryDark = Color(0xFF002080)
val primaryContainerDark = Color(0xFF0040D0)
val onPrimaryContainerDark = Color(0xFFC8D6FF)
val secondaryDark = Color(0xFF98B5FF)
val onSecondaryDark = Color(0xFF003070)
val secondaryContainerDark = Color(0xFF0048C0)
val onSecondaryContainerDark = Color(0xFFC8D6FF)
val tertiaryDark = Color(0xFF90B0FF)
val onTertiaryDark = Color(0xFF002860)
val tertiaryContainerDark = Color(0xFF0040A0)
val onTertiaryContainerDark = Color(0xFFC8D6FF)
val errorDark = Color(0xFFFFB5B5)
val onErrorDark = Color(0xFF770020)
val errorContainerDark = Color(0xFFB80020)
val onErrorContainerDark = Color(0xFFFFE0E0)
val backgroundDark = Color(0xFF001040)
val onBackgroundDark = Color(0xFFC8D6FF)
val surfaceDark = Color(0xFF001040)
val onSurfaceDark = Color(0xFFC8D6FF)
val surfaceVariantDark = Color(0xFF203E80)
val onSurfaceVariantDark = Color(0xFFA0B8FF)
val outlineDark = Color(0xFFA0B8FF)
val outlineVariantDark = Color(0xFF203E80)
val scrimDark = Color(0xFF001040)
val inverseSurfaceDark = Color(0xFFC8D6FF)
val inverseOnSurfaceDark = Color(0xFF203E80)
val inversePrimaryDark = Color(0xFF0040E0)
val surfaceDimDark = Color(0xFF001040)
val surfaceBrightDark = Color(0xFF0048C0)
val surfaceContainerLowestDark = Color(0xFF000A30)
val surfaceContainerLowDark = Color(0xFF001A50)
val surfaceContainerDark = Color(0xFF002060)
val surfaceContainerHighDark = Color(0xFF003070)
val surfaceContainerHighestDark = Color(0xFF004080)